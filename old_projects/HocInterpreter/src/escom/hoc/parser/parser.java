package escom.hoc.parser;


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Jun 17 19:58:26 CDT 2009
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Wed Jun 17 19:58:26 CDT 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\003\002\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\020\002\000\002\003\006\000\002\004\005\000" +
    "\002\016\002\000\002\016\004\000\002\016\004\000\002" +
    "\017\006\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\006\003\000\002\006\004\000\002\006\014" +
    "\000\002\006\006\000\002\006\012\000\002\006\006\000" +
    "\002\006\011\000\002\006\005\000\002\007\005\000\002" +
    "\014\003\000\002\015\003\000\002\010\003\000\002\011" +
    "\003\000\002\012\002\000\002\013\002\000\002\013\004" +
    "\000\002\013\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\036\002\000\003\000\005\000\010\000\014" +
    "\000\015\000\024\000\031\000\032\000\034\000\035\000" +
    "\036\000\043\000\044\000\001\002\000\036\002\015\003" +
    "\021\005\013\010\030\014\026\015\012\024\007\031\020" +
    "\032\011\034\006\035\025\036\010\043\014\044\031\001" +
    "\002\000\036\004\041\005\043\006\047\007\045\012\036" +
    "\014\152\020\051\021\035\022\040\023\046\025\042\026" +
    "\050\027\037\030\044\001\002\000\004\010\uffe6\001\002" +
    "\000\014\005\013\010\030\024\007\043\014\044\031\001" +
    "\002\000\004\010\uffe7\001\002\000\004\010\uffe5\001\002" +
    "\000\034\005\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3\024" +
    "\uffe3\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\043\uffe3" +
    "\044\uffe3\001\002\000\014\005\013\010\030\024\007\043" +
    "\014\044\031\001\002\000\100\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\043\uffe0\044\uffe0\001\002\000\004\002\001\001\002\000" +
    "\004\010\133\001\002\000\004\010\133\001\002\000\014" +
    "\005\013\010\030\024\007\043\014\044\031\001\002\000" +
    "\004\014\ufffb\001\002\000\004\010\116\001\002\000\036" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\012\uffde\014\115\020" +
    "\uffde\021\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\001\002\000\004\010\072\001\002\000\004\010" +
    "\uffe8\001\002\000\036\002\uffff\003\uffff\005\uffff\010\uffff" +
    "\014\uffff\015\uffff\024\uffff\031\uffff\032\uffff\034\uffff\035" +
    "\uffff\036\uffff\043\uffff\044\uffff\001\002\000\004\014\071" +
    "\001\002\000\014\005\013\010\030\024\007\043\014\044" +
    "\031\001\002\000\102\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\012\uffdf\013\032\014\uffdf\015\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf" +
    "\043\uffdf\044\uffdf\001\002\000\014\005\013\010\030\024" +
    "\007\043\014\044\031\001\002\000\100\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\043\uffde\044\uffde\001\002\000\100\004\041\005" +
    "\043\006\047\007\045\010\ufff9\011\ufff9\012\036\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\051\021\035\022\040\023" +
    "\046\024\ufff9\025\042\026\050\027\037\030\044\031\ufff9" +
    "\032\ufff9\033\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040" +
    "\ufff9\041\ufff9\043\ufff9\044\ufff9\001\002\000\014\005\013" +
    "\010\030\024\007\043\014\044\031\001\002\000\014\005" +
    "\013\010\030\024\007\043\014\044\031\001\002\000\014" +
    "\005\013\010\030\024\007\043\014\044\031\001\002\000" +
    "\014\005\013\010\030\024\007\043\014\044\031\001\002" +
    "\000\014\005\013\010\030\024\007\043\014\044\031\001" +
    "\002\000\014\005\013\010\030\024\007\043\014\044\031" +
    "\001\002\000\014\005\013\010\030\024\007\043\014\044" +
    "\031\001\002\000\014\005\013\010\030\024\007\043\014" +
    "\044\031\001\002\000\014\005\013\010\030\024\007\043" +
    "\014\044\031\001\002\000\014\005\013\010\030\024\007" +
    "\043\014\044\031\001\002\000\014\005\013\010\030\024" +
    "\007\043\014\044\031\001\002\000\014\005\013\010\030" +
    "\024\007\043\014\044\031\001\002\000\014\005\013\010" +
    "\030\024\007\043\014\044\031\001\002\000\100\004\041" +
    "\005\043\006\047\007\045\010\uffcf\011\uffcf\012\036\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\035\022\040" +
    "\023\046\024\uffcf\025\042\026\050\027\037\030\044\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\043\uffcf\044\uffcf\001\002\000\100\004" +
    "\041\005\043\006\047\007\045\010\uffd4\011\uffd4\012\036" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4" +
    "\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\043\uffd4\044\uffd4\001\002\000\100" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012" +
    "\036\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\001\002\000" +
    "\100\004\041\005\043\006\047\007\045\010\uffd1\011\uffd1" +
    "\012\036\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\043\uffd1\044\uffd1\001\002" +
    "\000\100\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\036\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9" +
    "\036\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\001" +
    "\002\000\100\004\041\005\043\006\047\007\045\010\uffd6" +
    "\011\uffd6\012\036\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044\uffd6" +
    "\001\002\000\100\004\uffdb\005\uffdb\006\047\007\045\010" +
    "\uffdb\011\uffdb\012\036\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044" +
    "\uffdb\001\002\000\100\004\041\005\043\006\047\007\045" +
    "\010\uffd3\011\uffd3\012\036\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\043\uffd3" +
    "\044\uffd3\001\002\000\100\004\uffdc\005\uffdc\006\047\007" +
    "\045\010\uffdc\011\uffdc\012\036\014\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\043" +
    "\uffdc\044\uffdc\001\002\000\100\004\041\005\043\006\047" +
    "\007\045\010\uffd2\011\uffd2\012\036\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033" +
    "\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\043\uffd2\044\uffd2\001\002\000\100\004\041\005\043\006" +
    "\047\007\045\010\uffd5\011\uffd5\012\036\014\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\043\uffd5\044\uffd5\001\002\000\100\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\043\uffd8\044\uffd8\001\002\000\100\004\041\005" +
    "\043\006\047\007\045\010\uffd0\011\uffd0\012\036\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\040\023" +
    "\046\024\uffd0\025\042\026\050\027\037\030\044\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\043\uffd0\044\uffd0\001\002\000\036\004\041" +
    "\005\043\006\047\007\045\011\070\012\036\020\051\021" +
    "\035\022\040\023\046\025\042\026\050\027\037\030\044" +
    "\001\002\000\100\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd\044" +
    "\uffdd\001\002\000\036\002\ufffd\003\ufffd\005\ufffd\010\ufffd" +
    "\014\ufffd\015\ufffd\024\ufffd\031\ufffd\032\ufffd\034\ufffd\035" +
    "\ufffd\036\ufffd\043\ufffd\044\ufffd\001\002\000\014\005\013" +
    "\010\030\024\007\043\014\044\031\001\002\000\036\004" +
    "\041\005\043\006\047\007\045\011\074\012\036\020\051" +
    "\021\035\022\040\023\046\025\042\026\050\027\037\030" +
    "\044\001\002\000\004\015\075\001\002\000\012\014\ufff8" +
    "\016\ufff8\037\ufff8\040\ufff8\001\002\000\012\014\100\016" +
    "\102\037\103\040\077\001\002\000\042\005\uffe3\010\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\024\uffe3\031\uffe3\032\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3" +
    "\044\uffe3\001\002\000\012\014\ufff7\016\ufff7\037\ufff7\040" +
    "\ufff7\001\002\000\012\014\ufff6\016\ufff6\037\ufff6\040\ufff6" +
    "\001\002\000\044\005\uffe4\010\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4\001" +
    "\002\000\014\005\013\010\030\024\007\043\014\044\031" +
    "\001\002\000\072\004\041\005\043\006\047\007\045\010" +
    "\uffe3\012\036\014\uffe3\015\uffe3\016\uffe3\020\051\021\035" +
    "\022\040\023\046\024\uffe3\025\042\026\050\027\037\030" +
    "\044\031\uffe3\032\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\043\uffe3\044\uffe3\001\002\000\042\005" +
    "\013\010\030\014\110\015\012\016\ufff4\024\007\031\020" +
    "\032\011\034\006\035\025\036\010\037\ufff4\040\ufff4\041" +
    "\107\043\014\044\031\001\002\000\074\004\041\005\043" +
    "\006\047\007\045\010\ufff1\012\036\014\ufff1\015\ufff1\016" +
    "\ufff1\020\051\021\035\022\040\023\046\024\ufff1\025\042" +
    "\026\050\027\037\030\044\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\012\014\ufff5\016\ufff5\037\ufff5\040" +
    "\ufff5\001\002\000\042\005\uffe2\010\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\024\uffe2\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\001\002" +
    "\000\042\005\uffe1\010\uffe1\014\uffe1\015\uffe1\016\uffe1\024" +
    "\uffe1\031\uffe1\032\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\040\uffe1\041\uffe1\043\uffe1\044\uffe1\001\002\000\044\005" +
    "\uffed\010\uffed\014\uffed\015\uffed\016\uffed\024\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\043\uffed\044\uffed\001\002\000\042\005\013" +
    "\010\030\014\110\015\012\016\ufff2\024\007\031\020\032" +
    "\011\034\006\035\025\036\010\037\ufff2\040\ufff2\041\114" +
    "\043\014\044\031\001\002\000\012\014\ufff3\016\ufff3\037" +
    "\ufff3\040\ufff3\001\002\000\036\002\ufffe\003\ufffe\005\ufffe" +
    "\010\ufffe\014\ufffe\015\ufffe\024\ufffe\031\ufffe\032\ufffe\034" +
    "\ufffe\035\ufffe\036\ufffe\043\ufffe\044\ufffe\001\002\000\014" +
    "\005\013\010\030\024\007\043\014\044\031\001\002\000" +
    "\036\004\041\005\043\006\047\007\045\012\036\017\120" +
    "\020\051\021\035\022\040\023\046\025\042\026\050\027" +
    "\037\030\044\001\002\000\014\005\013\010\030\024\007" +
    "\043\014\044\031\001\002\000\036\004\041\005\043\006" +
    "\047\007\045\012\036\017\122\020\051\021\035\022\040" +
    "\023\046\025\042\026\050\027\037\030\044\001\002\000" +
    "\014\005\013\010\030\024\007\043\014\044\031\001\002" +
    "\000\036\004\041\005\043\006\047\007\045\011\124\012" +
    "\036\020\051\021\035\022\040\023\046\025\042\026\050" +
    "\027\037\030\044\001\002\000\030\005\013\010\030\015" +
    "\012\024\007\031\020\032\011\034\006\035\025\036\010" +
    "\043\014\044\031\001\002\000\044\005\uffe4\010\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043" +
    "\uffe4\044\uffe4\001\002\000\044\005\uffef\010\uffef\014\uffef" +
    "\015\uffef\016\uffef\024\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041\uffef\043\uffef" +
    "\044\uffef\001\002\000\004\014\130\001\002\000\036\002" +
    "\ufffa\003\ufffa\005\ufffa\010\ufffa\014\ufffa\015\ufffa\024\ufffa" +
    "\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\043\ufffa\044" +
    "\ufffa\001\002\000\074\004\041\005\043\006\047\007\045" +
    "\010\ufff0\012\036\014\ufff0\015\ufff0\016\ufff0\020\051\021" +
    "\035\022\040\023\046\024\ufff0\025\042\026\050\027\037" +
    "\030\044\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\037\ufff0\040\ufff0\041\ufff0\043\ufff0\044\ufff0\001\002" +
    "\000\030\005\013\010\030\015\012\024\007\031\020\032" +
    "\011\034\006\035\025\036\010\043\014\044\031\001\002" +
    "\000\014\005\013\010\030\024\007\043\014\044\031\001" +
    "\002\000\036\004\041\005\043\006\047\007\045\011\135" +
    "\012\036\020\051\021\035\022\040\023\046\025\042\026" +
    "\050\027\037\030\044\001\002\000\030\005\uffe9\010\uffe9" +
    "\015\uffe9\024\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\043\uffe9\044\uffe9\001\002\000\044\005\uffe4\010\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\024\uffe4\031\uffe4\032\uffe4\033" +
    "\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4" +
    "\043\uffe4\044\uffe4\001\002\000\044\005\uffee\010\uffee\014" +
    "\uffee\015\uffee\016\uffee\024\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\043" +
    "\uffee\044\uffee\001\002\000\030\005\013\010\030\015\012" +
    "\024\007\031\020\032\011\034\006\035\025\036\010\043" +
    "\014\044\031\001\002\000\044\005\uffe4\010\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4\034" +
    "\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4" +
    "\044\uffe4\001\002\000\044\005\uffec\010\uffec\014\uffec\015" +
    "\uffec\016\uffec\024\uffec\031\uffec\032\uffec\033\143\034\uffec" +
    "\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\043\uffec\044" +
    "\uffec\001\002\000\030\005\013\010\030\015\012\024\007" +
    "\031\020\032\011\034\006\035\025\036\010\043\014\044" +
    "\031\001\002\000\044\005\uffe4\010\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\024\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\043\uffe4\044\uffe4" +
    "\001\002\000\044\005\uffeb\010\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\024\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\001" +
    "\002\000\100\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\036\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\043\uffd7\044\uffd7" +
    "\001\002\000\034\005\013\010\030\014\110\015\012\016" +
    "\150\024\007\031\020\032\011\034\006\035\025\036\010" +
    "\043\014\044\031\001\002\000\044\005\uffea\010\uffea\014" +
    "\uffea\015\uffea\016\uffea\024\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\043" +
    "\uffea\044\uffea\001\002\000\100\004\041\005\043\006\047" +
    "\007\045\010\uffce\011\uffce\012\036\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\051\021\035\022\040\023\046\024\uffce" +
    "\025\042\026\050\027\037\030\044\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\043\uffce\044\uffce\001\002\000\036\002\ufffc\003\ufffc\005" +
    "\ufffc\010\ufffc\014\ufffc\015\ufffc\024\ufffc\031\ufffc\032\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\043\ufffc\044\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\004\003\003\001\001\000\020\004\022\005" +
    "\004\006\026\010\016\011\015\014\021\015\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\032\005" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\146\001\001\000\006\004\032\005\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\137\001\001" +
    "\000\004\007\131\001\001\000\006\004\032\005\130\001" +
    "\001\000\004\020\126\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\032\005\066\001\001" +
    "\000\002\001\001\000\006\004\032\005\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\032\005\065" +
    "\001\001\000\006\004\032\005\064\001\001\000\006\004" +
    "\032\005\063\001\001\000\006\004\032\005\062\001\001" +
    "\000\006\004\032\005\061\001\001\000\006\004\032\005" +
    "\060\001\001\000\006\004\032\005\057\001\001\000\006" +
    "\004\032\005\056\001\001\000\006\004\032\005\055\001" +
    "\001\000\006\004\032\005\054\001\001\000\006\004\032" +
    "\005\053\001\001\000\006\004\032\005\052\001\001\000" +
    "\006\004\032\005\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\032\005\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\075" +
    "\001\001\000\004\017\100\001\001\000\004\013\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\111" +
    "\001\001\000\006\004\032\005\103\001\001\000\004\013" +
    "\104\001\001\000\020\004\032\005\105\006\110\010\016" +
    "\011\015\014\021\015\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\032\005\105\006\110\010\016\011" +
    "\015\014\021\015\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\032\005\116\001\001\000\002\001" +
    "\001\000\006\004\032\005\120\001\001\000\002\001\001" +
    "\000\006\004\032\005\122\001\001\000\002\001\001\000" +
    "\020\004\032\005\105\006\124\010\016\011\015\014\021" +
    "\015\023\001\001\000\004\012\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\032\005\105\006\135\010\016\011\015\014" +
    "\021\015\023\001\001\000\006\004\032\005\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\136\001" +
    "\001\000\002\001\001\000\020\004\032\005\105\006\140" +
    "\010\016\011\015\014\021\015\023\001\001\000\004\012" +
    "\141\001\001\000\002\001\001\000\020\004\032\005\105" +
    "\006\143\010\016\011\015\014\021\015\023\001\001\000" +
    "\004\012\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\032\005\105\006\110\010\016\011\015\014" +
    "\021\015\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public static void main(String args[]) throws Exception {
		Symbol s = (new parser(new Yylex(System.in)).parse());
		int i = 0;
		for(String st : (List<String>)s.value) {
			System.out.println(i++ + " " + st);
		}
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	public static List addAll(List original, List other) {
		List<String> d = (List<String>)other;
		String s;
		String r;
		for(int i = 0; i < d.size(); i++) {
			s = d.get(i);
			if("whilecode".equals(s)) {
				for(int j = 1; j < 3; j++) {
					r = String.valueOf(
						Integer.parseInt(
							d.get(i + j)
				       	 	) + original.size()
				    	);
					d.set(i + j, r);
				}
				continue;
			}
			if("ifcode".equals(s)) {
				for(int j = 1; j < 4; j++) {
					if("stop".equals(d.get(i + j))) {
						continue;
					}
					r = String.valueOf(
						Integer.parseInt(
							d.get(i + j)
				       	 	) + original.size()
				    	);
					d.set(i + j, r);
				}
			}
			if("forcode".equals(s)) {
				for(int j = 1; j < 5; j++) {
					if("stop".equals(d.get(i + j))) {
						continue;
					}
					r = String.valueOf(
						Integer.parseInt(
							d.get(i + j)
				       	 	) + original.size()
				    	);
					d.set(i + j, r);
				}
			}
			if("casecode".equals(s) || "switchcode".equals(s)) {
				for(int j = 1; j < 3; j++) {
					if("stop".equals(d.get(i + j))) {
						continue;
					}
					r = String.valueOf(
						Integer.parseInt(
							d.get(i + j)
				       	 	) + original.size()
				    	);
					d.set(i + j, r);
				}
			}
		}
		original.addAll(other);
		return original;
	}

	public static List newList(String c1) {
		ArrayList result = new ArrayList();
		code(result, c1);
		return result;
	}

	public static List newList2(String c1, String c2) {
		ArrayList result = new ArrayList();
		code2(result, c1, c2);
		return result;
	}

	public static List code4(List p, String c1, String c2,
					 String c3, String c4) {
		code(p, c1);
		code(p, c2);
		code(p, c3);
		code(p, c4);
		return p;
	}

	public static List code5(List p, String c1, String c2,
					 String c3, String c4,
					 String c5) {
		code(p, c1);
		code(p, c2);
		code(p, c3);
		code(p, c4);
		code(p, c5);
		return p;
	}

	public static List newList3(String c1, String c2, String c3) {
		ArrayList result = new ArrayList();
		code3(result, c1, c2, c3);
		return result;
	}

	public static List newList4(String c1, String c2, String c3, String c4) {
		ArrayList result = new ArrayList();
		code4(result, c1, c2, c3, c4);
		return result;
	}

	public static List newList5(String c1, String c2, String c3, String c4, String c5) {
		ArrayList result = new ArrayList();
		code5(result, c1, c2, c3, c4, c5);
		return result;
	}

	public static List code3(List p, String c1, String c2, String c3) {
		code(p, c1);
		code(p, c2);
		code(p, c3);
		return p;
	}

	public static List code(List p, String cosa) {
		if(p == null) {
			p = new ArrayList();
		}
		p.add(cosa);
		return p;
	}

	public static List code2(List p, String c1, String c2) {
		code(p, c1);
		code(p, c2);
		return p;
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= NOT expr 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = code(e, "not"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr OR expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "or"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr AND expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "and"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr NE expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "ne"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr EQ expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "eq"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= expr LE expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "le"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr LT expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "lt"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr GE expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "ge"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr GT expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "gt"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= SUB expr 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = code(e, "negate"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr POW expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1,e2); RESULT = code(e1, "pow"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr DIV expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "div"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MUL expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "mul"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr SUB expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "sub"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr ADD expr 
            {
              List RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 addAll(e1, e2); RESULT = code(e1, "add"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= LPAR expr RPAR 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= asgn 
            {
              List RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= VAR 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = newList2("varpush", v); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= NUM 
            {
              List RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = newList2("constpush", n); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmtlist ::= stmtlist stmt 
            {
              List RESULT = null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if(sl != null) {
			addAll(sl, s);
		} else {
			sl = s;
		}
		RESULT = sl;
	
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmtlist ::= stmtlist NL 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmtlist ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*stmtlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // end ::= 
            {
              List RESULT = null;
		 RESULT = code(null, "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*end*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if ::= IF 
            {
              List RESULT = null;
		 RESULT = newList4("ifcode", "stop", "stop", "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while ::= WHILE 
            {
              List RESULT = null;
		 RESULT = newList3("whilecode", "stop", "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // switch ::= SWITCH 
            {
              List RESULT = null;
		 RESULT = newList3("switchcode", "stop", "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*switch*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // for ::= FOR 
            {
              List RESULT = null;
		 RESULT = newList5("forcode", "stop", "stop", "stop", "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*for*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cond ::= LPAR expr RPAR 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = code(e, "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= LBRA stmtlist RBRA 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= if cond stmt end ELSE stmt end 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		List i = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List c = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List s1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List e1 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e2 = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		addAll(i, c);
		if(s1 != null) {
			i.set(1, String.valueOf(i.size()));
			addAll(i, s1);
		}
		addAll(i, e1);
		if(s2 != null) {
			i.set(2, String.valueOf(i.size()));
			addAll(i, s2);
		}
		addAll(i, e2);
		i.set(3, String.valueOf(i.size()));
		RESULT = i;
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= if cond stmt end 
            {
              List RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List i = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List c = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		addAll(i, c);
		if(s != null) {
			i.set(1, String.valueOf(i.size()));
			addAll(i, s);
		}
		addAll(i, e);
		i.set(3, String.valueOf(i.size()));
		RESULT = i;
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= switch LPAR expr RPAR LBRA cases RBRA end 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List c = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int enleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int enright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List en = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		e = code(e, "stop");
		addAll(s, e);
		s.set(1, String.valueOf(s.size()));
		addAll(s, c);
		addAll(s, en);
		s.set(2, String.valueOf(s.size()));
		RESULT = s;
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= while cond stmt end 
            {
              List RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List w = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List c = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		w.set(2, e.get(0));
		addAll(w, c);
		if(s != null) {
			w.set(1, String.valueOf(w.size()));
			addAll(w, s);
		}
		addAll(w, e);
		w.set(2, String.valueOf(w.size()));
		RESULT = w;
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= for LPAR expr PYC expr PYC expr RPAR stmt end 
            {
              List RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		List f = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		List init = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List cond = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int itleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int itright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List it = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		cond = code(cond, "stop");
		init = code(init, "stop");
		s    = code(s, "stop");
		addAll(f, cond);
		if(init != null) {
			f.set(1, String.valueOf(f.size()));
			addAll(f, init);
		}
		if(s != null) {
			f.set(2, String.valueOf(f.size()));
			addAll(f, s);
		}
		if(it != null) {
			f.set(3, String.valueOf(f.size()));
			addAll(f, it);
		}
		addAll(f, e);
		f.set(4, String.valueOf(f.size()));
		RESULT = f;
	
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= PRINT expr 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = code(e, "prexpr"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= expr 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = code(e, "pop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // case ::= DEFAULT stmtlist 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		List e = newList("default");
		s = code2(s, "constpush", "0");
		s = code(s, "stop");
		List c = newList3("casecode", "stop", "stop");
		addAll(c, e);
		c.set(1, String.valueOf(c.size()));
		addAll(c, s);
		c.set(2, String.valueOf(c.size()));
		RESULT = c;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // case ::= DEFAULT stmtlist BREAK 
            {
              List RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		List e = newList("default");
		s = code2(s, "constpush", "1");
		s = code(s, "stop");
		List c = newList3("casecode", "stop", "stop");
		addAll(c, e);
		c.set(1, String.valueOf(c.size()));
		addAll(c, s);
		c.set(2, String.valueOf(c.size()));
		RESULT = c;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // case ::= CASE expr stmtlist 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		e = code2(e, "eq", "stop");
		s = code2(s, "constpush", "0");
		s = code(s, "stop");
		List c = newList3("casecode", "stop", "stop");
		addAll(c, e);
		c.set(1, String.valueOf(c.size()));
		addAll(c, s);
		c.set(2, String.valueOf(c.size()));
		RESULT = c;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // case ::= CASE expr stmtlist BREAK 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		e = code2(e, "eq", "stop");
		s = code2(s, "constpush", "1");
		s = code(s, "stop");
		List c = newList3("casecode", "stop", "stop");
		addAll(c, e);
		c.set(1, String.valueOf(c.size()));
		addAll(c, s);
		c.set(2, String.valueOf(c.size()));
		RESULT = c;
	
              CUP$parser$result = new java_cup.runtime.Symbol(13/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cases ::= cases case 
            {
              List RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List cs = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List c = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		if(cs != null) {
			addAll(cs, c);
		} else {
			cs = c;
		}
		RESULT = cs;
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cases ::= cases NL 
            {
              List RESULT = null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List cs = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		RESULT = cs;
	
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cases ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*cases*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // asgn ::= VAR ASGN expr 
            {
              List RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = code3(e, "varpush", v, "asgn"); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*asgn*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // list ::= list error NT$0 NL 
            {
              List RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT = null;
 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // list ::= list expr NL 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List e = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(l != null) { addAll(l, e); } else { l = e; } RESULT = code2(l, "print", "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // list ::= list stmt NL 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List s = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(l != null) { addAll(l, s); } else { l = s; } RESULT = code(l, "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list ::= list asgn NL 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List a = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(l != null) { addAll(l, a); } else { l = a; } RESULT = code2(l, "pop", "stop"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list ::= list NL 
            {
              List RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List l = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // list ::= 
            {
              List RESULT = null;
		 RESULT = new ArrayList(); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List start_val = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

