package tablalalr;


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jun 06 18:23:57 CDT 2009
//----------------------------------------------------
import java.util.List;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
 * @version Sat Jun 06 18:23:57 CDT 2009
 */
public class parser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public parser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public parser(java_cup.runtime.Scanner s) {
        super(s);
    }
    /** Production table. */
    protected static final short _production_table[][] =
            unpackFromStrings(new String[]{
                "\000\012\000\002\002\004\000\002\003\003\000\002\003" +
                "\004\000\002\006\006\000\002\005\003\000\002\010\003" +
                "\000\002\010\005\000\002\004\003\000\002\007\003\000" +
                "\002\007\004"});

    /** Access to production table. */
    public short[][] production_table() {
        return _production_table;
    }
    /** Parse-action table. */
    protected static final short[][] _action_table =
            unpackFromStrings(new String[]{
                "\000\020\000\004\007\006\001\002\000\004\005\012\001" +
                "\002\000\006\002\010\007\006\001\002\000\004\005\ufffd" +
                "\001\002\000\006\002\000\007\000\001\002\000\004\002" +
                "\001\001\002\000\006\002\uffff\007\uffff\001\002\000\004" +
                "\007\015\001\002\000\006\004\021\006\020\001\002\000" +
                "\006\004\ufffc\006\ufffc\001\002\000\010\004\ufff9\006\ufff9" +
                "\007\ufff9\001\002\000\010\004\ufffa\006\ufffa\007\017\001" +
                "\002\000\010\004\ufff8\006\ufff8\007\ufff8\001\002\000\006" +
                "\002\ufffe\007\ufffe\001\002\000\004\007\015\001\002\000" +
                "\006\004\ufffb\006\ufffb\001\002"});

    /** Access to parse-action table. */
    public short[][] action_table() {
        return _action_table;
    }
    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table =
            unpackFromStrings(new String[]{
                "\000\020\000\010\003\004\005\003\006\006\001\001\000" +
                "\002\001\001\000\006\005\003\006\010\001\001\000\002" +
                "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                "\001\000\010\004\013\007\015\010\012\001\001\000\002" +
                "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
                "\001\000\002\001\001\000\002\001\001\000\006\004\021" +
                "\007\015\001\001\000\002\001\001"});

    /** Access to <code>reduce_goto</code> table. */
    public short[][] reduce_table() {
        return _reduce_table;
    }
    /** Instance of action encapsulation class. */
    protected CUP$parser$actions action_obj;

    /** Action encapsulation object initializer. */
    protected void init_actions() {
        action_obj = new CUP$parser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index. */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    public int error_sym() {
        return 1;
    }

    /*
    public static void main(String args[]) throws Exception {
        String gramaticas = "";
        String line;
        FileReader fr = new FileReader(args[0]);
        BufferedReader br = new BufferedReader(fr);

        while((line = br.readLine()) != null) {
            gramaticas += line + "\n";
        }

        System.out.println("Archivo: " + gramaticas);

        Symbol s = (new parser(new Yylex(new StringReader(gramaticas)))).parse();
        List<List<String>> reglas = (List<List<String>>) s.value;
        for (List<String> regla : reglas) {
            System.out.print(regla.get(0) + "->");
            for (int i = 1; i < regla.size(); i++) {
                System.out.print(regla.get(i));
            }
            System.out.println();
        }
    }
     */
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {

    private final parser parser;

    /** Constructor */
    CUP$parser$actions(parser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$parser$do_action(
            int CUP$parser$act_num,
            java_cup.runtime.lr_parser CUP$parser$parser,
            java.util.Stack CUP$parser$stack,
            int CUP$parser$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parser$result;

        /* select the action based on the action number */
        switch (CUP$parser$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // simbolos ::= simbolos SIMB
                 {
                    List RESULT = null;
                    int ssleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int ssright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    List ss = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

                    ss.add(s);
                    RESULT = ss;

                    CUP$parser$result = new java_cup.runtime.Symbol(5/*simbolos*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // simbolos ::= SIMB
                 {
                    List RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

                    List<String> simbolos = new ArrayList<String>();
                    simbolos.add(s);
                    RESULT = simbolos;

                    CUP$parser$result = new java_cup.runtime.Symbol(5/*simbolos*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // lado_der ::= simbolos
                 {
                    List RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    List s = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = s;
                    CUP$parser$result = new java_cup.runtime.Symbol(2/*lado_der*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // lados_der ::= lados_der OR lado_der
                 {
                    List RESULT = null;
                    int ldsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left;
                    int ldsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).right;
                    List lds = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).value;
                    int ldleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int ldright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    List ld = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

                    lds.add(ld);
                    RESULT = lds;

                    CUP$parser$result = new java_cup.runtime.Symbol(6/*lados_der*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 2)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // lados_der ::= lado_der
                 {
                    List RESULT = null;
                    int ldleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int ldright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    List ld = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

                    List<List<String>> tmp = new ArrayList<List<String>>();
                    tmp.add(ld);
                    RESULT = tmp;

                    CUP$parser$result = new java_cup.runtime.Symbol(6/*lados_der*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // lado_izq ::= SIMB
                 {
                    String RESULT = null;
                    int sleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int sright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    String s = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;
                    RESULT = s;
                    CUP$parser$result = new java_cup.runtime.Symbol(3/*lado_izq*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // regla ::= lado_izq FLECHA lados_der PUNTO_COMA
                 {
                    List RESULT = null;
                    int lileft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left;
                    int liright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).right;
                    String li = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).value;
                    int ldleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int ldright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    List ld = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;

                    List<List<String>> tmp = (List<List<String>>) ld;
                    for (List<String> l : tmp) {
                        l.add(0, li);
                    }
                    RESULT = ld;

                    CUP$parser$result = new java_cup.runtime.Symbol(4/*regla*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 3)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // reglas ::= reglas regla
                 {
                    List RESULT = null;
                    int rsleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int rsright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    List rs = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    List r = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

                    rs.addAll(r);
                    RESULT = rs;

                    CUP$parser$result = new java_cup.runtime.Symbol(1/*reglas*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // reglas ::= regla
                 {
                    List RESULT = null;
                    int rleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left;
                    int rright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right;
                    List r = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).value;

                    List<List<String>> tmp = new ArrayList<List<String>>();
                    tmp.addAll(r);
                    RESULT = tmp;

                    CUP$parser$result = new java_cup.runtime.Symbol(1/*reglas*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                return CUP$parser$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= reglas EOF
                 {
                    Object RESULT = null;
                    int start_valleft = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left;
                    int start_valright = ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).right;
                    List start_val = (List) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).value;
                    RESULT = start_val;
                    CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 1)).left, ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top - 0)).right, RESULT);
                }
                /* ACCEPT */
                CUP$parser$parser.done_parsing();
                return CUP$parser$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}

